(window["webpackJsonpGUI"]=window["webpackJsonpGUI"]||[]).push([["addon-entry-data-category-tweaks-v2"],{"./src/addons/addons/data-category-tweaks-v2/_runtime_entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"resources",function(){return resources});var _userscript_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/addons/addons/data-category-tweaks-v2/userscript.js");const resources={"userscript.js":_userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"]}},"./src/addons/addons/data-category-tweaks-v2/userscript.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_exports__["default"]=async function({addon,global,console,msg,safeMsg}){const ScratchBlocks=await addon.tab.traps.getBlockly();const SMALL_GAP=8;const BIG_GAP=24;const vm=addon.tab.traps.vm;let hasSeparateListCategory=false;const separateVariablesByType=toolboxXML=>{const listButtonIndex=toolboxXML.findIndex(i=>i.getAttribute("callbackkey")==="CREATE_LIST"||i.getAttribute("type")==="data_addtolist");return{variables:toolboxXML.slice(0,listButtonIndex),lists:toolboxXML.slice(listButtonIndex,toolboxXML.length)}};const separateLocalVariables=(workspace,toolboxXML)=>{const{variables,lists}=separateVariablesByType(toolboxXML);const makeLabel=l10n=>{const label=document.createElement("label");label.setAttribute("text",msg(l10n));return label};const fixGaps=variables=>{if(variables.length>0){for(var i=0;i<variables.length-1;i++){variables[i].setAttribute("gap",SMALL_GAP)}variables[i].setAttribute("gap",BIG_GAP)}};const separateVariablesByScope=xml=>{const before=[];const global=[];const local=[];const after=[];for(const blockXML of xml){if(blockXML.hasAttribute("id")){const id=blockXML.getAttribute("id");const variable=workspace.getVariableById(id);if(!variable||!variable.isLocal){global.push(blockXML)}else{local.push(blockXML)}}else if(global.length||local.length){after.push(blockXML)}else{before.push(blockXML)}}const result=before;if(global.length){result.push(makeLabel("for-all-sprites"));fixGaps(global);result.push(...global)}if(local.length){result.push(makeLabel("for-this-sprite-only"));fixGaps(local);result.push(...local)}return result.concat(after)};return separateVariablesByScope(variables).concat(separateVariablesByScope(lists))};const moveReportersDown=toolboxXML=>{const{variables,lists}=separateVariablesByType(toolboxXML);const moveReportersToEnd=xml=>{const reporters=[];const everythingElse=[];for(const blockXML of xml){if(blockXML.hasAttribute("id")||blockXML.tagName==="BUTTON"){reporters.push(blockXML)}else{everythingElse.push(blockXML)}}if(everythingElse.length){everythingElse[everythingElse.length-1].setAttribute("gap",BIG_GAP)}return everythingElse.concat(reporters)};return moveReportersToEnd(variables).concat(moveReportersToEnd(lists))};const DataCategory=ScratchBlocks.DataCategory;let variableCategory;let listCategory;const variableCategoryCallback=workspace=>{let result=DataCategory(workspace);if(addon.settings.get("moveReportersDown")){result=moveReportersDown(result)}if(addon.settings.get("separateLocalVariables")){result=separateLocalVariables(workspace,result)}if(!hasSeparateListCategory){return result}const{variables,lists}=separateVariablesByType(result);variableCategory=variables;listCategory=lists;return variableCategory};const listCategoryCallback=()=>{return listCategory};const oldShow=ScratchBlocks.Flyout.prototype.show;ScratchBlocks.Flyout.prototype.show=function(xmlList){this.workspace_.registerToolboxCategoryCallback("VARIABLE",variableCategoryCallback);this.workspace_.registerToolboxCategoryCallback("LIST",listCategoryCallback);return oldShow.call(this,xmlList)};const originalGetBlocksXML=vm.runtime.getBlocksXML;vm.runtime.getBlocksXML=function(target){const result=originalGetBlocksXML.call(this,target);hasSeparateListCategory=addon.settings.get("separateListCategory");if(hasSeparateListCategory){result.push({id:"data",xml:'\n        <category\n          name="%{BKY_CATEGORY_VARIABLES}"\n          id="variables"\n          colour="#FF8C1A"\n          secondaryColour="#DB6E00"\n          custom="VARIABLE">\n        </category>\n        <category\n          name="'.concat(safeMsg("list-category"),'"\n          id="lists"\n          colour="#FF661A"\n          secondaryColour="#FF5500"\n          custom="LIST">\n        </category>')})}return result};if(vm.editingTarget){vm.emitWorkspaceUpdate()}addon.settings.addEventListener("change",e=>{if(addon.settings.get("separateListCategory")!==hasSeparateListCategory){if(vm.editingTarget){vm.emitWorkspaceUpdate()}}else{const workspace=Blockly.getMainWorkspace();if(workspace){workspace.refreshToolboxSelection_()}}})}}}]);